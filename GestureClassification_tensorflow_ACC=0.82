{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled70.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOz5L5HtPt1A7F9XbnhWBp/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mingun0112/2021Gyeongsothon/blob/main/GestureClassification_tensorflow_ACC%3D0.82\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3pvV8f-JxAfM",
        "outputId": "b149867a-deea-4206-90c8-dc7df66b6038"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip /content/drive/MyDrive/hand_gesture_data.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yeQUmzBL4Nwf",
        "outputId": "28e6c166-7ee0-4668-f437-0fb82ad7d375"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/drive/MyDrive/hand_gesture_data.zip\n",
            "  inflating: sample_submission.csv   \n",
            "  inflating: test.csv                \n",
            "  inflating: train.csv               \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "jVn-43-R4No1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "from tensorflow.keras.layers import *\n",
        "from tensorflow.keras.models import *\n",
        "from tensorflow.keras.optimizers import *\n",
        "from tensorflow.keras.callbacks import *"
      ],
      "metadata": {
        "id": "4wMKuD6n37p3"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train = pd.read_csv('train.csv')\n",
        "test = pd.read_csv('test.csv')\n",
        "submission = pd.read_csv('sample_submission.csv')"
      ],
      "metadata": {
        "id": "2f2_dkNz4uKL"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gr_mu = train.groupby('target').mean().iloc[:, 1 :]\n",
        "gr_mu"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "8zYb3XiG44ou",
        "outputId": "0a359370-dd85-46ff-c10b-73239d565736"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-d5e79470-c821-451a-b53f-78310968b71b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensor_1</th>\n",
              "      <th>sensor_2</th>\n",
              "      <th>sensor_3</th>\n",
              "      <th>sensor_4</th>\n",
              "      <th>sensor_5</th>\n",
              "      <th>sensor_6</th>\n",
              "      <th>sensor_7</th>\n",
              "      <th>sensor_8</th>\n",
              "      <th>sensor_9</th>\n",
              "      <th>sensor_10</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_23</th>\n",
              "      <th>sensor_24</th>\n",
              "      <th>sensor_25</th>\n",
              "      <th>sensor_26</th>\n",
              "      <th>sensor_27</th>\n",
              "      <th>sensor_28</th>\n",
              "      <th>sensor_29</th>\n",
              "      <th>sensor_30</th>\n",
              "      <th>sensor_31</th>\n",
              "      <th>sensor_32</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>target</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.425433</td>\n",
              "      <td>-0.922978</td>\n",
              "      <td>1.389976</td>\n",
              "      <td>0.559473</td>\n",
              "      <td>-0.694207</td>\n",
              "      <td>0.015784</td>\n",
              "      <td>0.793226</td>\n",
              "      <td>-0.913523</td>\n",
              "      <td>-0.561867</td>\n",
              "      <td>-0.802052</td>\n",
              "      <td>...</td>\n",
              "      <td>0.022476</td>\n",
              "      <td>-0.056393</td>\n",
              "      <td>-1.587852</td>\n",
              "      <td>-0.420015</td>\n",
              "      <td>0.905688</td>\n",
              "      <td>0.151944</td>\n",
              "      <td>-0.626062</td>\n",
              "      <td>-0.822711</td>\n",
              "      <td>-0.621473</td>\n",
              "      <td>-1.962038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.692796</td>\n",
              "      <td>-0.776260</td>\n",
              "      <td>-1.040046</td>\n",
              "      <td>-0.796645</td>\n",
              "      <td>-0.716867</td>\n",
              "      <td>-0.864049</td>\n",
              "      <td>0.217547</td>\n",
              "      <td>-0.588134</td>\n",
              "      <td>-0.795507</td>\n",
              "      <td>-0.470282</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.727154</td>\n",
              "      <td>-0.841780</td>\n",
              "      <td>-0.605011</td>\n",
              "      <td>-0.622476</td>\n",
              "      <td>0.257340</td>\n",
              "      <td>-0.515845</td>\n",
              "      <td>-0.883002</td>\n",
              "      <td>-0.682358</td>\n",
              "      <td>0.154507</td>\n",
              "      <td>-0.607232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-2.346430</td>\n",
              "      <td>-0.822219</td>\n",
              "      <td>1.015480</td>\n",
              "      <td>0.079543</td>\n",
              "      <td>0.805130</td>\n",
              "      <td>-0.322211</td>\n",
              "      <td>-1.559588</td>\n",
              "      <td>-1.354339</td>\n",
              "      <td>-1.188115</td>\n",
              "      <td>-1.084991</td>\n",
              "      <td>...</td>\n",
              "      <td>0.926393</td>\n",
              "      <td>-0.561614</td>\n",
              "      <td>-0.598858</td>\n",
              "      <td>-0.591853</td>\n",
              "      <td>-2.619469</td>\n",
              "      <td>-0.660750</td>\n",
              "      <td>-0.706551</td>\n",
              "      <td>-0.714254</td>\n",
              "      <td>-0.997320</td>\n",
              "      <td>-0.504212</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.983485</td>\n",
              "      <td>-1.559744</td>\n",
              "      <td>-3.951593</td>\n",
              "      <td>-0.422654</td>\n",
              "      <td>-0.727304</td>\n",
              "      <td>-0.518749</td>\n",
              "      <td>3.218229</td>\n",
              "      <td>-0.876624</td>\n",
              "      <td>-0.636275</td>\n",
              "      <td>-0.459929</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.134662</td>\n",
              "      <td>0.026740</td>\n",
              "      <td>-0.935549</td>\n",
              "      <td>-0.714854</td>\n",
              "      <td>1.169092</td>\n",
              "      <td>-0.441372</td>\n",
              "      <td>-0.693405</td>\n",
              "      <td>-1.013212</td>\n",
              "      <td>-0.500214</td>\n",
              "      <td>0.046207</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4 rows × 32 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5e79470-c821-451a-b53f-78310968b71b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d5e79470-c821-451a-b53f-78310968b71b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d5e79470-c821-451a-b53f-78310968b71b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "        sensor_1  sensor_2  sensor_3  sensor_4  sensor_5  sensor_6  sensor_7  \\\n",
              "target                                                                         \n",
              "0      -0.425433 -0.922978  1.389976  0.559473 -0.694207  0.015784  0.793226   \n",
              "1      -0.692796 -0.776260 -1.040046 -0.796645 -0.716867 -0.864049  0.217547   \n",
              "2      -2.346430 -0.822219  1.015480  0.079543  0.805130 -0.322211 -1.559588   \n",
              "3      -0.983485 -1.559744 -3.951593 -0.422654 -0.727304 -0.518749  3.218229   \n",
              "\n",
              "        sensor_8  sensor_9  sensor_10  ...  sensor_23  sensor_24  sensor_25  \\\n",
              "target                                 ...                                    \n",
              "0      -0.913523 -0.561867  -0.802052  ...   0.022476  -0.056393  -1.587852   \n",
              "1      -0.588134 -0.795507  -0.470282  ...  -0.727154  -0.841780  -0.605011   \n",
              "2      -1.354339 -1.188115  -1.084991  ...   0.926393  -0.561614  -0.598858   \n",
              "3      -0.876624 -0.636275  -0.459929  ...  -0.134662   0.026740  -0.935549   \n",
              "\n",
              "        sensor_26  sensor_27  sensor_28  sensor_29  sensor_30  sensor_31  \\\n",
              "target                                                                     \n",
              "0       -0.420015   0.905688   0.151944  -0.626062  -0.822711  -0.621473   \n",
              "1       -0.622476   0.257340  -0.515845  -0.883002  -0.682358   0.154507   \n",
              "2       -0.591853  -2.619469  -0.660750  -0.706551  -0.714254  -0.997320   \n",
              "3       -0.714854   1.169092  -0.441372  -0.693405  -1.013212  -0.500214   \n",
              "\n",
              "        sensor_32  \n",
              "target             \n",
              "0       -1.962038  \n",
              "1       -0.607232  \n",
              "2       -0.504212  \n",
              "3        0.046207  \n",
              "\n",
              "[4 rows x 32 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f, a = plt.subplots(1, 4, figsize = (12, 6))\n",
        "for i in range(4) :\n",
        "    a[i].set_title(f'target {i} Image')\n",
        "    a[i].imshow(np.array(gr_mu.iloc[i]).reshape(8, 4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "h6qcu7LP5QO3",
        "outputId": "0c68900b-6126-4082-b71e-ca6e96b957de"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 4 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = train.iloc[:, 1:-1]\n",
        "target = test.iloc[:, 1:]"
      ],
      "metadata": {
        "id": "Yk9kE-us5ckW"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = np.array(X).reshape(-1, 8, 4, 1)\n",
        "target = np.array(target).reshape(-1, 8, 4, 1)"
      ],
      "metadata": {
        "id": "0I_eX5brJidO"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ohe = OneHotEncoder(sparse = False)\n",
        "y = ohe.fit_transform(train[['target']])\n",
        "skf = StratifiedKFold(n_splits = 10, random_state = 42, shuffle = True)\n",
        "skf = StratifiedKFold(n_splits = 10, random_state = 42, shuffle = True)\n",
        "\n",
        "es = EarlyStopping(monitor = 'val_acc', patience = 5, mode = 'max', verbose = 0)\n",
        "\n"
      ],
      "metadata": {
        "id": "mpqnJHV3JlID"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cnn_acc = []\n",
        "cnn_pred = np.zeros((target.shape[0], 4))\n",
        "for i, (tr_idx, val_idx) in enumerate(skf.split(X, train.target)) :\n",
        "    print(f'{i + 1} Fold Training.....')\n",
        "    tr_x, tr_y = X[tr_idx], y[tr_idx]\n",
        "    val_x, val_y = X[val_idx], y[val_idx]\n",
        "    \n",
        "    ### CNN 모델\n",
        "    cnn = Sequential()\n",
        "    cnn.add(Conv2D(8, (2, 2), padding = \"same\", activation = 'elu', input_shape = (8, 4, 1)))\n",
        "    cnn.add(BatchNormalization())\n",
        "    cnn.add(Conv2D(16, (2, 2), padding = \"same\", activation = 'elu'))\n",
        "    cnn.add(MaxPooling2D(2, 2))\n",
        "    cnn.add(Conv2D(32, (3, 3), padding = \"same\", activation = 'elu'))\n",
        "    cnn.add(BatchNormalization())\n",
        "    cnn.add(Conv2D(32, (3, 3), padding = \"same\", activation = 'elu'))\n",
        "    cnn.add(BatchNormalization())\n",
        "    cnn.add(GlobalAveragePooling2D())\n",
        "    cnn.add(Dense(16, activation = 'relu'))\n",
        "    cnn.add(Dense(4, activation = 'softmax'))\n",
        "\n",
        "    ### ModelCheckPoint Fold마다 갱신\n",
        "    mc = ModelCheckpoint(f'model_{i + 1}.h5', save_best_only = True, monitor = 'val_acc', mode = 'max', verbose = 0)\n",
        "    \n",
        "    ### 모델 compile\n",
        "    cnn.compile(optimizer = RMSprop(learning_rate = 0.04), loss = 'categorical_crossentropy', metrics = ['acc'])\n",
        "\n",
        "    cnn.fit(tr_x, tr_y, validation_data = (val_x, val_y), epochs = 100, batch_size = 32, callbacks = [es, mc], verbose = 0)\n",
        "\n",
        "    ### 최고 성능 기록 모델 Load\n",
        "    best = load_model(f'model_{i + 1}.h5')\n",
        "    ### validation predict\n",
        "    val_pred = best.predict(val_x)\n",
        "    ### 확률값 중 최대값을 클래스로 매칭\n",
        "    val_cls = np.argmax(val_pred, axis = 1)\n",
        "    ### Fold별 정확도 산출\n",
        "    fold_cnn_acc = accuracy_score(np.argmax(val_y, axis = 1), val_cls)\n",
        "    cnn_acc.append(fold_cnn_acc)\n",
        "    print(f'{i + 1} Fold ACC of CNN = {fold_cnn_acc}\\n')\n",
        "\n",
        "    ### Fold별 test 데이터에 대한 예측값 생성 및 앙상블\n",
        "    fold_pred = best.predict(target) / skf.n_splits\n",
        "    cnn_pred += fold_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PeZRxE_3Jvj_",
        "outputId": "eb199c0b-9d66-4322-a442-2ee29644b5bd"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 Fold Training.....\n",
            "1 Fold ACC of CNN = 0.8162393162393162\n",
            "\n",
            "2 Fold Training.....\n",
            "2 Fold ACC of CNN = 0.8461538461538461\n",
            "\n",
            "3 Fold Training.....\n",
            "3 Fold ACC of CNN = 0.8803418803418803\n",
            "\n",
            "4 Fold Training.....\n",
            "4 Fold ACC of CNN = 0.8931623931623932\n",
            "\n",
            "5 Fold Training.....\n",
            "5 Fold ACC of CNN = 0.8461538461538461\n",
            "\n",
            "6 Fold Training.....\n",
            "6 Fold ACC of CNN = 0.8154506437768241\n",
            "\n",
            "7 Fold Training.....\n",
            "7 Fold ACC of CNN = 0.8669527896995708\n",
            "\n",
            "8 Fold Training.....\n",
            "8 Fold ACC of CNN = 0.7939914163090128\n",
            "\n",
            "9 Fold Training.....\n",
            "9 Fold ACC of CNN = 0.8197424892703863\n",
            "\n",
            "10 Fold Training.....\n",
            "10 Fold ACC of CNN = 0.8669527896995708\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(cnn_acc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QRpqV1JVKTtd",
        "outputId": "144f3712-9b9b-4283-f567-8453b095e83b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8445141410806647"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "submission['target'] = np.argmax(cnn_pred, axis = 1)"
      ],
      "metadata": {
        "id": "gZtOj4jSKW4J"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission.to_csv('1st.csv', index = False)"
      ],
      "metadata": {
        "id": "mx2dm2LoKZF3"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission.target.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_ofDKnKxKdbn",
        "outputId": "d5aa0c82-d1c1-4d45-e5f5-7edaa8501e01"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2    2460\n",
              "1    2457\n",
              "3    2229\n",
              "0    2197\n",
              "Name: target, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    }
  ]
}